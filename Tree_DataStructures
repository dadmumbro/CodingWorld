from queue import *

class BinaryTree():
  def __init__(self, value):
    self.data = value
    self.left = None
    self.right = None

  def insert_left(self,value):
    if self.left == None:
      self.left = BinaryTree(value)
    else:
      tempnode = BinaryTree(value)
      tempnode.left = self.left
      self.left = tempnode

  def insert_right(self,value):
      if self.right ==None:
        self.right = BinaryTree(value)
      else:
        tempnode = BinaryTree(value)
        tempnode.right = self.right
        self.right = tempnode

  def preorder(self):
    print(self.data)
    if self.left:
      self.left.preorder()
    if self.right:
      self.right.preorder()

  def inorder(self):
        if self.left:
          self.left.inorder()
        print(self.data)
        if self.right:
          self.right.inorder()

  def postorder(self):
                if self.left:
                  self.left.postorder()
                if self.right:
                  self.right.postorder()
                print(self.data)

  def bfs(self):
    queue = Queue()
    queue.put(self)

    while not queue.empty():
      first_node = queue.get()
      print(first_node.data)

      if first_node.left:
        queue.put(first_node.left)
      if first_node.right:
        queue.put(first_node.right)


root = BinaryTree('a')
bnode = BinaryTree('b')
cnode = BinaryTree('c')
dnode = BinaryTree('d')
#enode = BinaryTree('e')
#fnode = BinaryTree('f')
root.left = bnode
root.right = cnode
bnode.right = dnode
cnode.insert_left('e')
cnode.insert_right('f')
enode = cnode.left
fnode = cnode.right
#print(root.left.data)
#print(cnode.data)
#print(enode.data)
#print(root.right.data)
#print(root.postorder())
#print(root.bfs())


class BinarySearchTree():
  def __init__(self,value):
    self.data = value
    self.left = None
    self.right = None

  def insert(self,value):
    if value <= self.data and self.left:
      self.left.insert(value)
    elif value <= self.data:
      self.left = BinarySearchTree(value)
    elif value > self.data and self.right:
      self.right.insert(value)
    else:
      self.right = BinarySearchTree(value)

  def finder(self,value):
    if value == self.data:
      print("found") #"found"
    elif (value <= self.data) and (self.left):
      self.left.finder(value)
    elif (value >= self.data) and (self.right):
      self.right.finder(value)
    else:
      print("not found")

  def find_min(self):
    if (self.left):
      self.left.find_min()
    else:
      print(self.data)
    return None

  def find_max(self):
    if (self.right):
      self.right.find_max()
    else:
      print(self.data)
    return None

  def delete(self,value, parent):
    if value ==self.data:
      if !(self.left) and !(self.right) and (self == parent.left):
        parent.left = None
        return True
      elif !(self.left) and !(self.right) and (self == parent.right):
        parent.right = None
        return True
      elif self.left_child and self.right_child is None and self == parent.left_child:
        parent.left_child = self.left_child
        self.clear_node()
      elif self.left_child and self.right_child is None and self == parent.right_child:
          parent.right_child = self.left_child
          return True
      elif self.right_child and self.left_child is None and self == parent.left_child:
          parent.left_child = self.right_child
          return True
      elif self.right_child and self.left_child is None and self == parent.right_child:
          parent.right_child = self.right_child
          return True
      else:
          self.value = self.right_child.find_minimum_value()
          self.right_child.delete(self.value, self)
    elif (value <= self.data) and (self.left):
      self.left.finder(value,self)
    elif (value >= self.data) and (self.right):
      self.right.finder(value,self)
    else:
      print("not found cannot delete value")

broot = BinarySearchTree(50)
broot.insert(76)
broot.insert(21)
broot.insert(4)
broot.insert(32)
broot.insert(100)
broot.insert(64)
node1 = broot.left
node2 = broot.right
#print(broot.data)
#print(broot.finder(100))  #found
#print(broot.finder(65)) #notfound
#print(broot.find_max())
#print(broot.find_min())
print(broot.delete(53))
